#ifndef ALG3_H_
#define ALG3_H_

#include <glib.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>

#define K 7
#define W 15
#define MIN_SUP_LENGTH 0

typedef struct {
    int value;
    char* fingerprint;
} Element;

/**
 * @brief A simple function to print an Element struct
 *
 * A simple function to print an Element struct
 *
 * @param el Element to be printed
 *
 */
void print_Element(Element *el);

/**
 * @brief Checks if a string is numeric.
 *
 * Checks if a string is numeric.
 *
 * @param str The string to be checked.
 * @return true if the string is numeric, false otherwise.
 *
 */
bool is_numeric(const char *str);

/**
 * @brief Calculates the supporting length of a GArray.
 *
 * This function calculates the supporting length of a given GArray by summing
 * up the elements starting from index 'i' and up to 'k' elements ahead.
 *
 * @param array The GArray containing integer elements.
 * @param i The starting index from which the calculation begins.
 * @param k The number of elements to include in the calculation.
 * @return The supporting length calculated as the sum of 'k' elements starting from index 'i'.
 *         Returns 0 if the input array is NULL.
 *
 */
int supporting_length(GArray *array, int i, int k);

/**
 * @brief Inserts an element into a GQueue according to a given criterion.
 *
 * This function inserts an element into a GQueue based on a comparison criterion
 * defined by the function pointer 'phi'. It pops elements from the queue until
 * the criterion is met, then pushes the new element onto the queue.
 *
 * @param array The GArray containing integer elements.
 * @param queue The GQueue into which the element will be inserted.
 * @param X The element to be inserted into the queue.
 * @param phi The comparison function used to determine the insertion point.
 * @param k The parameter used by the comparison function 'phi'.
 */
void insert(GArray *array, GQueue *queue, Element *X, int (*phi)(GArray *array, int i, int k), int k);

/**
 * @brief Fetches an element from the head of a GQueue.
 *
 * This function fetches and returns an element from the head of the given GQueue.
 * It pops elements from the queue until the value of the element at the head is
 * greater than or equal to the specified value 'T'.
 *
 * @param queue The GQueue from which the element will be fetched.
 * @param T The value used to determine when to stop fetching elements.
 * @return The element fetched from the head of the queue.
 */
Element *fetch(GQueue *queue, int T);

/**
 * @brief Prints the contents of a GQueue.
 *
 * This function prints the contents of the given GQueue to stdout.
 *
 * @param queue The GQueue to be printed.
 */
void print_queue(GQueue *queue);

/**
 * @brief Prints the contents of a GArray.
 *
 * This function prints the contents of the given GArray to stdout.
 *
 * @param array The GArray to be printed.
 */
void print_array(GArray *array);

/**
 * @brief Parses a string into a GArray of integers.
 *
 * This function parses the given string and extracts numeric tokens separated by spaces.
 * It then creates a GArray of integers containing these numeric tokens.
 *
 * @param line The input string to be parsed.
 * @return A GArray of integers parsed from the input string.
 */
GArray* get_k_fingers(char *line);

/**
 * @brief Converts a section of a GArray into a string.
 *
 * This function converts a section of the given GArray into a string representation
 * with elements separated by the specified separator.
 *
 * @param array The GArray from which elements will be converted.
 * @param i The starting index of the section to be converted.
 * @param k The number of elements to include in the conversion.
 * @param separator The string used to separate elements in the resulting string.
 * @return A string representation of the section of the GArray.
 */
char *k_finger_to_string(GArray *array, int i, int k, const char *separator);

/**
 * @brief Implements algorithm 3.
 *
 * This function implements algorithm 3 using the provided parameters and functions.
 * It calculates the supporting length of the given fingerprint and generates a
 * resulting GArray of elements based on certain conditions.
 *
 * @param fingerprint The input GArray of fingerprints.
 * @param w The window size used in the algorithm.
 * @param k The number of elements to include in the supporting length calculation.
 * @param phi The supporting length function used in the algorithm.
 * @param n The number of elements in the input fingerprint.
 * @return A GArray containing the resulting elements generated by algorithm 3.
 */
GArray* alg3(GArray* fingerprint, int w, int k, int (*phi)(GArray *array, int i, int k), int n);

#endif // ALG3_H_
